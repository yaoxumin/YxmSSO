package com.yxm.sso.api;

import java.util.Map;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

import com.yxm.sso.context.GlobalSessions;
import com.yxm.sso.context.RedisPool;

public class RedisApi {
	/**
	 * <p>
	 * 说明:在redis里面保存map对象,key-value模式
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-14 下午5:42:21
	 */
	public static void saveMapData(String key, Map<String, String> mapData) {
		Jedis redis = null;
		try {
			redis = RedisPool.jedisPool.getResource();
			redis.hmset(key, mapData);
		} catch (Exception e) {
			// 销毁对象
			RedisPool.jedisPool.returnBrokenResource(redis);
		} finally {
			// 还原到连接池
			RedisPool.jedisPool.returnResource(redis);
		}
	}

	/**
	 * <p>
	 * 说明:为特定map对象保存键值对
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-14 上午11:35:56
	 */
	public static void saveMapData(String key, String field, String value) {
		Jedis redis = null;
		try {
			redis = RedisPool.jedisPool.getResource();
			redis.hset(key, field, value);
		} catch (Exception e) {
			// 销毁对象
			RedisPool.jedisPool.returnBrokenResource(redis);
		} finally {
			// 还原到连接池
			RedisPool.jedisPool.returnResource(redis);
		}
	}

	/**
	 * <p>
	 * 说明:获取保存在redis里面的特定map
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-14 下午5:39:53
	 */
	public static Map<String, String> getMapData(String key) {
		Map<String, String> dataMap = null;
		Jedis redis = null;
		try {
			JedisPool temp = RedisPool.jedisPool;
			redis = RedisPool.jedisPool.getResource();
			dataMap = redis.hgetAll(key);
		} catch (Exception e) {
			e.printStackTrace();
			RedisPool.jedisPool.returnBrokenResource(redis);
		} finally {
			RedisPool.jedisPool.returnResource(redis);
		}
		return dataMap;
	}

	/**
	 * <p>
	 * 说明:获取map里面特定的键值对信息
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-14 下午5:39:42
	 */
	public static String getMaptData(String flag, String field) {
		Jedis redis = null;
		String result = "";
		try {
			redis = RedisPool.jedisPool.getResource();
			result = redis.hget(flag, field);
		} catch (Exception e) {
			// 销毁对象
			RedisPool.jedisPool.returnBrokenResource(redis);
		} finally {
			// 还原到连接池
			RedisPool.jedisPool.returnResource(redis);
		}
		return result;
	}

	/**
	 * <p>
	 * 说明:删除map中的某个键值对
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-14 下午5:11:08
	 * @return:成功返回1，删除失败返回0
	 */
	public static long delObjectData(String flag, String field) {
		long result = 0;// 失败是0,成功是1
		Jedis redis = null;
		try {
			redis = RedisPool.jedisPool.getResource();
			result = redis.hdel(flag, field);
		} catch (Exception e) {
			RedisPool.jedisPool.returnBrokenResource(redis);
		} finally {
			RedisPool.jedisPool.returnResource(redis);
		}

		return result;
	}

	/*
	 * <p>Description:查field是否存在</p>
	 * 
	 * @author:姚旭民
	 * 
	 * @data:2017-7-20 下午3:56:56
	 */
	public static boolean exitsToken(String flag, String field) {
		boolean result = false;
		Jedis jedis = null;
		try {
			jedis = RedisPool.jedisPool.getResource();
			result = jedis.hexists(flag, field);
		} catch (Exception e) {
			RedisPool.jedisPool.returnBrokenResource(jedis);
		} finally {
			RedisPool.jedisPool.returnResource(jedis);
		}
		return result;
	}

	/*
	 * <p>Description:验证是否存在token，同时验证redis存在的值是否和线程值里面的一致，不一致就重新保存/p>
	 * 
	 * @author:姚旭民
	 * 
	 * @data:2017-7-18 下午4:55:03
	 */
	public static boolean exitsToken(String flag, String field, String sessionId) {
		boolean result = false;
		Jedis jedis = null;
		try {
			jedis = RedisPool.jedisPool.getResource();
			if (jedis.hexists(flag, field)) {
				String temp = jedis.hget(flag, field);
				// 检查session线程池里面是否存在这个session对象，如果存在就返回true;
				// 不存在就删除redis里面的缓存，同时返回false
				if (sessionId.equals(sessionId)
						&& GlobalSessions.getSession(sessionId) != null) {
					result = true;
				} else {// 不一致，删除redis里面保存的信息
					delObjectData(flag, field);
				}
			}
		} catch (Exception e) {
			RedisPool.jedisPool.returnBrokenResource(jedis);
		} finally {
			RedisPool.jedisPool.returnResource(jedis);
		}
		return result;
	}
}
