package com.yxm.ssm.api;

import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import com.yxm.sso.context.GlobalSessions;
import com.yxm.sso.context.RedisPool;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.JedisPool;

/**
 * <p>
 * 说明:redis操作 api
 * </p>
 * 
 * @author:姚旭民
 * @date:2017-7-14 上午11:27:43
 */
public class RedisApi {

	/**
	 * <p>
	 * 说明:在redis里面保存map对象
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-14 下午5:42:21
	 */
	public static void saveMapData(String flag, Map<String, String> mapData) {
		Jedis redis = null;
		try {
			redis = RedisPool.jedisPool.getResource();
			redis.hmset(flag, mapData);
		} catch (Exception e) {
			// 销毁对象
			RedisPool.jedisPool.returnBrokenResource(redis);
		} finally {
			// 还原到连接池
			RedisPool.jedisPool.returnResource(redis);
		}
	}

	/**
	 * <p>
	 * 说明:获取保存在redis里面的map
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-14 下午5:39:53
	 */
	public static Map<String, String> getMapData(String flag) {
		Map<String, String> dataMap = null;
		Jedis redis = null;
		try {
			JedisPool temp = RedisPool.jedisPool;
			redis = RedisPool.jedisPool.getResource();
			dataMap = redis.hgetAll(flag);
		} catch (Exception e) {
			e.printStackTrace();
			RedisPool.jedisPool.returnBrokenResource(redis);
		} finally {
			RedisPool.jedisPool.returnResource(redis);
		}
		return dataMap;
	}

	/**
	 * <p>
	 * 说明:保存个体数据数据类型为table key-value
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-14 上午11:35:56
	 */
	public static void saveObjectData(String flag, String field, String value) {
		Jedis redis = null;
		try {
			redis = RedisPool.jedisPool.getResource();
			redis.hset(flag, field, value);
		} catch (Exception e) {
			// 销毁对象
			RedisPool.jedisPool.returnBrokenResource(redis);
		} finally {
			// 还原到连接池
			RedisPool.jedisPool.returnResource(redis);
		}
	}

	/**
	 * <p>
	 * 说明:删除个体元素
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-14 下午5:11:08
	 * @return:成功返回1，删除失败返回0
	 */
	public static long delObjectData(String flag, String field) {
		long result = 0;// 失败是0,成功是1
		Jedis redis = null;
		try {
			redis = RedisPool.jedisPool.getResource();
			result = redis.hdel(flag, field);
		} catch (Exception e) {
			RedisPool.jedisPool.returnBrokenResource(redis);
		} finally {
			RedisPool.jedisPool.returnResource(redis);
		}

		return result;
	}

	/**
	 * <p>
	 * 说明:获取个体元素
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-14 下午5:39:42
	 */
	public static String getObjectData(String flag, String field) {
		Jedis redis = null;
		String result = "";
		try {
			redis = RedisPool.jedisPool.getResource();
			result = redis.hget(flag, field);
		} catch (Exception e) {
			// 销毁对象
			RedisPool.jedisPool.returnBrokenResource(redis);
		} finally {
			// 还原到连接池
			RedisPool.jedisPool.returnResource(redis);
		}
		return result;
	}

	/**
	 * <p>
	 * 说明:销毁整个table包括的资源
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-14 下午2:17:20
	 */
	public static long delTableData(String flag) {
		long result = 0;
		Jedis redis = null;
		try {
			redis = RedisPool.jedisPool.getResource();
			result = redis.del(flag);
		} catch (Exception e) {
			// 销毁对象
			RedisPool.jedisPool.returnBrokenResource(redis);
		} finally {
			// 还原到连接池
			RedisPool.jedisPool.returnResource(redis);
		}

		return result;
	}

	/*
	 * <p>Description:查field是否存在</p>
	 * 
	 * @author:姚旭民
	 * 
	 * @data:2017-7-20 下午3:56:56
	 */
	public static boolean exitsToken(String flag, String field) {
		boolean result = false;
		Jedis jedis = null;
		try {
			jedis = RedisPool.jedisPool.getResource();
			result = jedis.hexists(flag, field);
		} catch (Exception e) {
			RedisPool.jedisPool.returnBrokenResource(jedis);
		} finally {
			RedisPool.jedisPool.returnResource(jedis);
		}
		return result;
	}

	/*
	 * <p>Description:验证是否存在token，同时验证redis存在的值是否和线程值里面的一致，不一致就重新保存/p>
	 * @author:姚旭民
	 * @data:2017-7-18 下午4:55:03
	 */
	public static boolean exitsToken(String flag, String field, String sessionId) {
		boolean result = false;
		Jedis jedis = null;
		try {
			jedis = RedisPool.jedisPool.getResource();
			if (jedis.hexists(flag, field)) {
				String temp = jedis.hget(flag, field);
				// 检查session线程池里面是否存在这个session对象，如果存在就返回true;
				// 不存在就删除redis里面的缓存，同时返回false
				if (sessionId.equals(sessionId)
						&& GlobalSessions.getSession(sessionId) != null) {
					result = true;
				} else {// 不一致，删除redis里面保存的信息
					delObjectData(flag, field);
				}
			}
		} catch (Exception e) {
			RedisPool.jedisPool.returnBrokenResource(jedis);
		} finally {
			RedisPool.jedisPool.returnResource(jedis);
		}
		return result;
	}

	// public static void main(String[] args) {
	// RedisApi.testAdd();
	// }
	//
	// //测试添加list集合
	// public void testList() {
	// Jedis redis = RedisPool.jedisPool.getResource();
	// redis.hset("teable", "field1", "value1");
	// redis.hset("teable", "field2", "value2");
	// redis.hset("teable", "field3", "value3");
	// List<String> list = redis.hmget("table", "field1", "field2", "field3");
	// for (String tmp : list) {
	// System.out.println(tmp);
	// }
	// }
	//
	// //测试添加map
	// public static void testMap() {
	// //同时将多个field - value 对设置到哈希表 key中
	// Map<String, String> map = new ConcurrentHashMap<String, String>();
	// for (int i = 0; i < 10000; i++) {
	// map.put("field"+i, "value"+i);
	// }
	// if (null != getObjectData("table", "field1")) {
	// delTableData("table");
	// }
	// //得到map下卖弄的username的值
	// Map<String, String> maps = getMapData("table");
	// System.out.println(maps.size());
	//
	// setMapData("table", map);
	//
	// //HGETALL key返回哈希表key中，所有的域和值
	// maps = getMapData("table");
	//
	// System.out.println(maps.size());
	// }
	//
	// public static void testAdd() {
	// String value = getObjectData("table", "field1");
	// System.out.println("第一次:"+value);
	// if (null != getObjectData("table", "field1")) {
	// delTableData("table");
	// }
	// value = getObjectData("table", "field1");
	// System.out.println("第二次:"+value);
	// for (int i = 1; i < 10; i++) {
	// saveObjectData("table", "field"+i, "value"+i);
	// }
	// value = getObjectData("table", "field1");
	// System.out.println("第三次:"+value);
	// delObjectData("table", "field1");
	// value = getObjectData("table", "field1");
	// System.out.println("第四次:"+value);
	// }
}
