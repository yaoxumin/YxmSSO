package com.yxm.sso.util;

import java.util.UUID;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;

import com.yxm.ssm.api.RedisApi;
import com.yxm.sso.context.AppContext;
import com.yxm.sso.context.GlobalSessions;
import com.yxm.sso.domain.Person;

/**
 * <p>
 * 说明:用来管理token的相关事物的类型
 * </p>
 * 
 * @author:姚旭民
 * @date:2017-7-10 下午2:25:05
 */
public class TokenUtils {
	private static final Logger logger = LogManager.getLogger(TokenUtils.class);

	/**
	 * <p>
	 * 说明:产生一个UUID作为一个token,并且保存在redis里面
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-10 下午5:34:21
	 */
	public static boolean saveToken(String token, String sessionId) {
		boolean flag = true;
		try {
			// 顺序依次是，表，key，value
			RedisApi.saveObjectData(AppContext.KEY_REDIS_TOKEN_TABLE, token,
					sessionId);
		} catch (Exception e) {
			System.out.println("TokenUtils的saveToken方法，保存token进入redis失败");
			logger.info("TokenUtils的saveToken方法，保存token进入redis失败");
			flag = false;// 处理失败
		}
		return flag;
	}

	/**
	 * <p>
	 * 说明:通过appCode
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-10 下午2:27:16
	 */
	public static String getToken(String sessionId, Person person) {
		String result = null;
		try {
			// 【1】生产token
			result = UUID.randomUUID().toString();
			// 【2】把生产的token保存进入redis
			saveToken(result, sessionId);
		} catch (Exception e) {
			System.out.println("TokenUtils的getToken出错");
			logger.info("TokenUtils的getToken出错");
		}
		return result;
	}

	/**
	 * <p>
	 * 说明:通过token来获取保存的sessionId
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-15 下午2:27:10
	 */
	public static String getSessionId(String token) {
		String result = "";
		if (StringUtils.isNotBlank(token)) {
			result = RedisApi.getObjectData(AppContext.KEY_REDIS_TOKEN_TABLE,
					token);
		}
		return result;
	}

	/**
	 * <p>
	 * 说明:删除某个 token键值，执行成功返回true，失败是false
	 * </p>
	 * 
	 * @author:姚旭民
	 * @date:2017-7-15 下午2:46:35
	 */
	public static boolean delToken(String token) {
		boolean flag = false;
		// 【1】检查token是否为null
		if (!StringUtils.isNotBlank(token)) {
			// 【2】检查一下token是否是存在redis，如果不存在，接下来的操作都不必进行
			if (TokenUtils.exitsToken(token)) {
				String sessionId = getSessionId(token);
				long status = RedisApi.delObjectData(
						AppContext.KEY_REDIS_TOKEN_TABLE, token);
				GlobalSessions.delSession(sessionId);
				flag = status == 1 ? true : false;
			}
		}
		return flag;
	}

	/*
	 * <p>Description:检验redis里面是否存在了 这个token</p>
	 * 
	 * @author:姚旭民
	 * 
	 * @data:2017-7-20 下午4:03:05
	 */
	public static boolean exitsToken(String token) {
		boolean result = false;
		if (StringUtils.isNotBlank(token)) {
			result = RedisApi.exitsToken(AppContext.KEY_REDIS_TOKEN_TABLE,
					token);
		}
		return result;
	}

	/**
	 * <p>
	 * 说明:验证token是否存在
	 * </p>
	 * 
	 * @author:姚旭民
	 * @param:token的值，String类型
	 * @return:存在token返回true，其余情况返回false
	 * @date:2017-7-15 下午2:54:11
	 */
	public static boolean verifyToken(String token, String sessionId) {
		boolean flag = false;
		if (StringUtils.isNotBlank(token, sessionId)) {
			flag = RedisApi.exitsToken(AppContext.KEY_REDIS_TOKEN_TABLE, token,
					sessionId);
		}
		return flag;
	}
	
	public static void main(String[] args) {
		System.out.println( UUID.randomUUID().toString());
	}
}
