package com.yxm.sso.util.service;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

import org.springframework.data.redis.core.RedisAccessor;

import com.yxm.sso.api.RedisApi;
import com.yxm.sso.context.AppContext;
import com.yxm.sso.util.TokenUtils;

/*
 *<p>Description:redis的各种操作</p>
 *@author:姚旭民
 *@data:2017-8-4 下午5:20:39
 */
public class RedisServiceImpl {
	/*
	 * <p>说明:把对象信息写到了cache里面</>p
	 * 
	 * @author:姚旭民
	 * 
	 * @data:2017-8-6 下午1:24:55
	 */
	public static boolean saveInfoCache(Object object, String id) {
		try {
			Class<?> classType = object.getClass();
			Field[] fields = classType.getDeclaredFields();// 获取所有的属性
			String field;// 用来遍历的属性变量
			String key = classType.getSimpleName() + id;// 对象类型加id变成了redis里面的key
			Map<String, String> value = new HashMap<String, String>();// 存到redis里面的value集合
			
			String regex = ".*password.*";
			
			for (Field f : fields) {
				f.setAccessible(true);// 设置允许获得的权限
				field = f.toString().substring(
						f.toString().lastIndexOf(".") + 1); // 取出属性名称
				if (f.get(object) != null && !field.toLowerCase().matches(regex)) {//不包含有敏感字样
					value.put(field, f.get(object).toString());
				}
			}

			if (value != null && value.size() > 0) {
				RedisApi.saveMapData(key, value);
				return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return false;
	}

	/*
	 * <p>说明:获取redis缓存数据</p>
	 * 
	 * @author:姚旭民
	 * 
	 * @data:2017-8-6 下午4:14:39
	 */
	public static Map getCacheData(Class<?> classType, String token) {
		Map<String, String> result = null;
		try {
			String id = TokenUtils.decodeOfString(token).split(
					AppContext.KEY_SPILT_DEFAULT)[0];// 获取第一个id，第二个是名字
			String key = classType.getSimpleName() + id;
			result = RedisApi.getMapData(key);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
}
